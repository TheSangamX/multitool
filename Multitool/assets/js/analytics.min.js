// Enhanced Analytics and Tracking (minified)
class AnalyticsManager {
    constructor() {
        this.config = {
            trackingId: 'GA_MEASUREMENT_ID',
            enableEnhancedEcommerce: true,
            enableUserTiming: true,
            enableExceptionTracking: true
        };
        this.pageStartTime = Date.now();
        this.init();
    }

    init() {
        this.setupGoogleAnalytics();
        this.setupCustomEvents();
        this.setupConversionTracking();
        this.setupErrorTracking();
        this.trackPagePerformance();
    }

    setupGoogleAnalytics() {
        if (typeof gtag !== 'undefined') {
            gtag('config', this.config.trackingId, {
                page_title: document.title,
                page_location: window.location.href,
                custom_map: {
                    custom_parameter_1: 'tool_usage',
                    custom_parameter_2: 'user_engagement'
                }
            });
            this.trackPageView();
        }
    }

    setupCustomEvents() {
        document.addEventListener('click', this.handleClick.bind(this));
        document.addEventListener('submit', this.handleFormSubmit.bind(this));
        window.addEventListener('beforeunload', this.handlePageExit.bind(this));
    }

    handleClick(event) {
        const target = event.target.closest('[data-analytics]');
        if (target) {
            const eventData = JSON.parse(target.dataset.analytics || '{}');
            this.trackEvent('click', {
                event_category: eventData.category || 'UI',
                event_label: eventData.label || target.textContent,
                value: eventData.value || 1
            });
        }
    }

    handleFormSubmit(event) {
        const form = event.target;
        const formName = form.dataset.formName || form.id || 'unknown';
        this.trackEvent('form_submit', {
            event_category: 'Form',
            event_label: formName
        });
    }

    handlePageExit() {
        const timeOnPage = Date.now() - this.pageStartTime;
        this.trackEvent('page_exit', {
            event_category: 'Engagement',
            event_label: 'time_on_page',
            value: Math.round(timeOnPage / 1000)
        });
    }

    trackEvent(eventName, parameters = {}) {
        if (typeof gtag !== 'undefined') {
            gtag('event', eventName, {
                event_category: parameters.event_category || 'General',
                event_label: parameters.event_label || '',
                value: parameters.value || 1,
                ...parameters
            });
        }
    }

    trackPageView(path = window.location.pathname) {
        if (typeof gtag !== 'undefined') {
            gtag('config', this.config.trackingId, {
                page_path: path,
                page_title: document.title
            });
        }
        this.pageStartTime = Date.now();
    }

    trackConversion(conversionId, value = 0, currency = 'USD') {
        if (typeof gtag !== 'undefined') {
            gtag('event', 'conversion', {
                send_to: conversionId,
                value: value,
                currency: currency
            });
        }
    }

    trackToolUsage(toolName, action = 'use') {
        this.trackEvent('tool_usage', {
            event_category: 'Tools',
            event_label: `${toolName}_${action}`,
            custom_parameter_1: toolName
        });
    }

    trackUserTiming(category, variable, value, label = '') {
        if (typeof gtag !== 'undefined') {
            gtag('event', 'timing_complete', {
                name: variable,
                value: value,
                event_category: category,
                event_label: label
            });
        }
    }

    setupConversionTracking() {
        const conversionEvents = ['tool_download', 'tool_share', 'newsletter_signup', 'contact_form'];
        conversionEvents.forEach(event => {
            document.addEventListener(event, data => {
                this.trackConversion('AW-CONVERSION_ID', data.detail?.value || 0);
            });
        });
    }

    setupErrorTracking() {
        window.addEventListener('error', event => {
            this.trackEvent('javascript_error', {
                event_category: 'Error',
                event_label: event.error?.message || 'Unknown error',
                value: 1
            });
        });

        window.addEventListener('unhandledrejection', event => {
            this.trackEvent('promise_rejection', {
                event_category: 'Error',
                event_label: event.reason?.toString() || 'Unknown rejection',
                value: 1
            });
        });
    }

    trackPagePerformance() {
        window.addEventListener('load', () => {
            setTimeout(() => {
                const navigation = performance.getEntriesByType('navigation')[0];
                if (navigation) {
                    this.trackUserTiming('Page Load', 'DOM Content Loaded', 
                        navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart);
                    this.trackUserTiming('Page Load', 'Load Complete', 
                        navigation.loadEventEnd - navigation.loadEventStart);
                }
            }, 0);
        });
    }

    trackCoreWebVitals(metric, value) {
        this.trackEvent('web_vitals', {
            event_category: 'Performance',
            event_label: metric,
            value: Math.round(value),
            custom_parameter_2: metric
        });
    }

    trackUserEngagement(action, details = {}) {
        this.trackEvent('user_engagement', {
            event_category: 'Engagement',
            event_label: action,
            ...details
        });
    }

    setupHeatmapTracking() {
        if (typeof hotjar !== 'undefined') {
            hotjar('identify', 'USER_ID', {
                tool_usage: this.getToolUsageData(),
                user_type: 'free'
            });
        }
    }

    getToolUsageData() {
        return JSON.parse(localStorage.getItem('toolUsage') || '{}');
    }
}

// A/B Testing Manager
class ABTestManager {
    constructor() {
        this.tests = new Map();
        this.userVariants = JSON.parse(localStorage.getItem('abTestVariants') || '{}');
        this.init();
    }

    init() {
        this.setupTests();
        this.applyVariants();
    }

    setupTests() {
        this.addTest('hero_cta_text', {
            control: 'Get Started',
            variant_a: 'Try Tools Now',
            variant_b: 'Start Free'
        });
        this.addTest('tool_card_layout', {
            control: 'vertical',
            variant_a: 'horizontal',
            variant_b: 'grid'
        });
    }

    addTest(testName, variants) {
        this.tests.set(testName, variants);
        if (!this.userVariants[testName]) {
            this.userVariants[testName] = this.selectVariant(variants);
            localStorage.setItem('abTestVariants', JSON.stringify(this.userVariants));
        }
    }

    selectVariant(variants) {
        const keys = Object.keys(variants);
        return keys[Math.floor(Math.random() * keys.length)];
    }

    applyVariants() {
        this.tests.forEach((variants, testName) => {
            const selectedVariant = this.userVariants[testName];
            this.applyVariant(testName, selectedVariant, variants[selectedVariant]);
        });
    }

    applyVariant(testName, variantName, variantValue) {
        document.body.setAttribute(`data-test-${testName}`, variantName);
        
        if (testName === 'hero_cta_text') {
            const ctaButton = document.querySelector('.hero .btn-primary');
            if (ctaButton) ctaButton.textContent = variantValue;
        }
        
        if (typeof gtag !== 'undefined') {
            gtag('event', 'ab_test_view', {
                event_category: 'A/B Test',
                event_label: `${testName}_${variantName}`
            });
        }
    }

    trackConversion(testName, conversionType = 'click') {
        const variant = this.userVariants[testName];
        if (variant && typeof gtag !== 'undefined') {
            gtag('event', 'ab_test_conversion', {
                event_category: 'A/B Test',
                event_label: `${testName}_${variant}_${conversionType}`
            });
        }
    }
}

// Initialize analytics when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
    if (typeof gtag !== 'undefined') {
        window.analyticsManager = new AnalyticsManager();
        window.abTestManager = new ABTestManager();
    }
});

// Export for module usage
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { AnalyticsManager, ABTestManager };
}