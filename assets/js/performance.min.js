// Performance optimization and monitoring (minified version)
class PerformanceMonitor{constructor(){this.metrics={};this.observers=new Map();this.init()}init(){this.setupPerformanceObserver();this.measureCoreWebVitals();this.setupResourceMonitoring();this.trackUserInteractions()}setupPerformanceObserver(){if('PerformanceObserver'in window){const observer=new PerformanceObserver(list=>{for(const entry of list.getEntries()){this.processPerformanceEntry(entry)}});observer.observe({entryTypes:['navigation','paint','largest-contentful-paint','first-input','layout-shift','measure']});this.observers.set('performance',observer)}}measureCoreWebVitals(){this.measureLCP();this.measureFID();this.measureCLS()}measureLCP(){const observer=new PerformanceObserver(entryList=>{const entries=entryList.getEntries();const lastEntry=entries[entries.length-1];this.metrics.lcp=lastEntry.startTime;this.reportMetric('LCP',lastEntry.startTime);observer.disconnect()});observer.observe({type:'largest-contentful-paint',buffered:true})}measureFID(){const observer=new PerformanceObserver(entryList=>{for(const entry of entryList.getEntries()){const fid=entry.processingStart-entry.startTime;this.metrics.fid=fid;this.reportMetric('FID',fid);observer.disconnect()}});observer.observe({type:'first-input',buffered:true})}measureCLS(){let clsValue=0;const observer=new PerformanceObserver(entryList=>{for(const entry of entryList.getEntries()){if(!entry.hadRecentInput){clsValue+=entry.value}}this.metrics.cls=clsValue;this.reportMetric('CLS',clsValue)});observer.observe({type:'layout-shift',buffered:true})}setupResourceMonitoring(){const observer=new PerformanceObserver(list=>{for(const entry of list.getEntries()){if(entry.transferSize>100000){console.warn('Large resource detected:',entry.name,entry.transferSize)}}});observer.observe({entryTypes:['resource']})}trackUserInteractions(){document.addEventListener('click',this.trackInteraction.bind(this));document.addEventListener('scroll',this.throttle(this.trackScroll.bind(this),100))}trackInteraction(event){const target=event.target.closest('[data-track]');if(target){const action=target.dataset.track;gtag('event',action,{event_category:'User Interaction',event_label:target.textContent||target.alt||'Unknown'})}}trackScroll(){const scrollPercent=Math.round((window.scrollY/(document.documentElement.scrollHeight-window.innerHeight))*100);if(scrollPercent%25===0&&scrollPercent>0){gtag('event','scroll',{event_category:'Engagement',event_label:`${scrollPercent}%`,value:scrollPercent})}}processPerformanceEntry(entry){switch(entry.entryType){case'navigation':this.processNavigationEntry(entry);break;case'paint':this.processPaintEntry(entry);break;case'measure':this.processMeasureEntry(entry);break}}processNavigationEntry(entry){this.metrics.domContentLoaded=entry.domContentLoadedEventEnd-entry.domContentLoadedEventStart;this.metrics.loadComplete=entry.loadEventEnd-entry.loadEventStart;this.metrics.ttfb=entry.responseStart-entry.requestStart}processPaintEntry(entry){this.metrics[entry.name.replace('-','_')]=entry.startTime}processMeasureEntry(entry){this.metrics[entry.name]=entry.duration}reportMetric(name,value){if(typeof gtag==='function'){gtag('event','web_vitals',{event_category:'Performance',event_label:name,value:Math.round(value),custom_parameter_1:name})}console.log(`${name}:`,value)}throttle(func,limit){let inThrottle;return function(){const args=arguments;const context=this;if(!inThrottle){func.apply(context,args);inThrottle=true;setTimeout(()=>inThrottle=false,limit)}}}getMetrics(){return this.metrics}destroy(){this.observers.forEach(observer=>observer.disconnect());this.observers.clear()}}

// Asset optimization
class AssetOptimizer{constructor(){this.init()}init(){this.optimizeImages();this.preloadCriticalResources();this.setupLazyLoading()}optimizeImages(){document.querySelectorAll('img[data-src]').forEach(img=>{const observer=new IntersectionObserver((entries,observer)=>{entries.forEach(entry=>{if(entry.isIntersecting){this.loadImage(entry.target);observer.unobserve(entry.target)}})},{rootMargin:'50px'});observer.observe(img)})}loadImage(img){const src=img.dataset.src;const webpSrc=img.dataset.webp;if(this.supportsWebP()&&webpSrc){img.src=webpSrc}else if(src){img.src=src}img.onload=()=>{img.classList.add('loaded');img.removeAttribute('data-src');img.removeAttribute('data-webp')}}supportsWebP(){const canvas=document.createElement('canvas');canvas.width=1;canvas.height=1;return canvas.toDataURL('image/webp').indexOf('data:image/webp')===0}preloadCriticalResources(){const criticalResources=[{href:'/assets/css/main.min.css',as:'style'},{href:'/assets/js/app.min.js',as:'script'},{href:'/assets/fonts/inter-var.woff2',as:'font',type:'font/woff2',crossorigin:'anonymous'}];criticalResources.forEach(resource=>{const link=document.createElement('link');link.rel='preload';Object.assign(link,resource);document.head.appendChild(link)})}setupLazyLoading(){if('IntersectionObserver'in window){const lazyElements=document.querySelectorAll('[data-lazy]');const lazyObserver=new IntersectionObserver((entries,observer)=>{entries.forEach(entry=>{if(entry.isIntersecting){const element=entry.target;this.loadLazyContent(element);observer.unobserve(element)}})});lazyElements.forEach(el=>lazyObserver.observe(el))}}loadLazyContent(element){const type=element.dataset.lazy;switch(type){case'component':this.loadComponent(element);break;case'iframe':this.loadIframe(element);break;default:console.warn('Unknown lazy type:',type)}}async loadComponent(element){const componentName=element.dataset.component;try{const module=await import(`/assets/js/components/${componentName}.min.js`);const Component=module.default;new Component(element)}catch(error){console.error(`Failed to load component ${componentName}:`,error)}}loadIframe(element){const src=element.dataset.src;if(src){element.src=src;element.removeAttribute('data-src')}}}

// Code splitting and module loading
class ModuleLoader{constructor(){this.loadedModules=new Set();this.loadingModules=new Map()}async loadModule(moduleName){if(this.loadedModules.has(moduleName)){return}if(this.loadingModules.has(moduleName)){return this.loadingModules.get(moduleName)}const loadPromise=this.importModule(moduleName);this.loadingModules.set(moduleName,loadPromise);try{await loadPromise;this.loadedModules.add(moduleName);this.loadingModules.delete(moduleName)}catch(error){this.loadingModules.delete(moduleName);throw error}}async importModule(moduleName){const moduleMap={'qr-generator':()=>import('/assets/js/tools/qr-generator.min.js'),'json-formatter':()=>import('/assets/js/tools/json-formatter.min.js'),'sip-calculator':()=>import('/assets/js/tools/sip-calculator.min.js'),'word-counter':()=>import('/assets/js/tools/word-counter.min.js'),'pdf-converter':()=>import('/assets/js/tools/pdf-converter.min.js')};const loader=moduleMap[moduleName];if(!loader){throw new Error(`Module ${moduleName} not found`)}return loader()}}

// Initialize performance monitoring
const performanceMonitor=new PerformanceMonitor();
const assetOptimizer=new AssetOptimizer();
const moduleLoader=new ModuleLoader();

// Export for global access
window.PerformanceMonitor=performanceMonitor;
window.AssetOptimizer=assetOptimizer;
window.ModuleLoader=moduleLoader;